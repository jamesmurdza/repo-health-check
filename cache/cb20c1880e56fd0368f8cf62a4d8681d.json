{"total_count": 1458, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/nodejs/node/issues/59210", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59210/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59210/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59210/events", "html_url": "https://github.com/nodejs/node/issues/59210", "id": 3263357169, "node_id": "I_kwDOAZ7xs87CguDx", "number": 59210, "title": "Error: spawnSync npm.cmd EINVAL", "user": {"login": "hyrious", "id": 8097890, "node_id": "MDQ6VXNlcjgwOTc4OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8097890?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hyrious", "html_url": "https://github.com/hyrious", "followers_url": "https://api.github.com/users/hyrious/followers", "following_url": "https://api.github.com/users/hyrious/following{/other_user}", "gists_url": "https://api.github.com/users/hyrious/gists{/gist_id}", "starred_url": "https://api.github.com/users/hyrious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hyrious/subscriptions", "organizations_url": "https://api.github.com/users/hyrious/orgs", "repos_url": "https://api.github.com/users/hyrious/repos", "events_url": "https://api.github.com/users/hyrious/events{/privacy}", "received_events_url": "https://api.github.com/users/hyrious/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2025-07-25T14:08:29Z", "updated_at": "2025-07-25T17:01:53Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "Node.js v24.1.0\n\nTLDR: How could I run `npm install` or similar commands on Windows without seeing warnings?\n\nWhen you do this on Windows:\n\n```js\nchild_process.spawnSync('npm.cmd', ['-v'], { stdio: 'inherit' })\n```\n\nYou will get an error:\n\n```\nError: spawnSync npm.cmd EINVAL\n```\n\nAnd I know this was used to [fix a CVE](https://nodejs.org/en/blog/vulnerability/april-2024-security-releases-2), where executing a batch file breaks the promise about all `args` are properly quoted without leading to attacks.\n\nThe \"fix\" was adding `shell: true` so that authors must know this command will be unsafe and it is better to only pass in authored strings.\n\nHowever, in Node.js 24 [there is a warning poping out about using `shell: true` is unsafe](https://github.com/nodejs/node/pull/57199).\n\n```js\n> child_process.spawnSync('npm.cmd', ['-v'], { stdio: 'inherit', shell: true })\n11.3.0\n{\n  status: 0,\n  signal: null,\n  output: [ null, null, null ],\n  pid: 16548,\n  stdout: null,\n  stderr: null\n}\n> (node:15964) [DEP0190] DeprecationWarning: Passing args to a child process with shell option true can lead to security vulnerabilities, as the arguments are not escaped, only concatenated.\n```\n\nDisclaimer: In most of the cases the shell commands are controlled by myself (or say the code author, not user). So the author knows the command will be safe since all input strings are predictable. If an attacker could modify the source code to construct arbitrary strings, he would also be able to run any code without even using the batch file escaping hack.\n\nCurrently, I see no easy way to escape from that warning.\n\nRelated issue: #52554\n\nPossible ways to escape:\n\n- Capture the stderr stream, so that users won't see it...\n- Use `spawnSync('cmd.exe', ['/d', '/s', '/c', 'npm -v'])` since this is not `.cmd`... However it may require extra code to escape strings which in the end does the same as the one in the source code of Node.js.\n\n", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59210/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59210/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/59202", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59202/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59202/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59202/events", "html_url": "https://github.com/nodejs/node/issues/59202", "id": 3261856847, "node_id": "I_kwDOAZ7xs87Ca_xP", "number": 59202, "title": "fs.globSync returns incorrect results with non-UTF8 encoded file names.", "user": {"login": "jasnell", "id": 439929, "node_id": "MDQ6VXNlcjQzOTkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/439929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasnell", "html_url": "https://github.com/jasnell", "followers_url": "https://api.github.com/users/jasnell/followers", "following_url": "https://api.github.com/users/jasnell/following{/other_user}", "gists_url": "https://api.github.com/users/jasnell/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasnell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasnell/subscriptions", "organizations_url": "https://api.github.com/users/jasnell/orgs", "repos_url": "https://api.github.com/users/jasnell/repos", "events_url": "https://api.github.com/users/jasnell/events{/privacy}", "received_events_url": "https://api.github.com/users/jasnell/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 151728674, "node_id": "MDU6TGFiZWwxNTE3Mjg2NzQ=", "url": "https://api.github.com/repos/nodejs/node/labels/confirmed-bug", "name": "confirmed-bug", "color": "fc2929", "default": false, "description": "Issues with confirmed bugs."}, {"id": 155435785, "node_id": "MDU6TGFiZWwxNTU0MzU3ODU=", "url": "https://api.github.com/repos/nodejs/node/labels/fs", "name": "fs", "color": "0052cc", "default": false, "description": "Issues and PRs related to the fs subsystem / file system."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2025-07-25T03:20:09Z", "updated_at": "2025-07-25T13:17:43Z", "closed_at": null, "author_association": "MEMBER", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "For example... on Linux, where file names are just byte sequences...\n\n```js\nconst { writeFileSync, existsSync, globSync } = require('node:fs');\n\nconst path = Buffer.from([0xe9]);\nwriteFileSync(path, 'hello');\nexistsSync(path);  // true\n\nconsole.log(globSync('[^a-z]')); // [ '\ufffd' ] non-utf8 bytes in the file name end up replaced.\n```\n\nThe `globSync`, et. al APIs likely need an `encoding` option that instructs it to return the filenames as `Buffer` objects.", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59202/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59202/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/59193", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59193/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59193/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59193/events", "html_url": "https://github.com/nodejs/node/issues/59193", "id": 3259576138, "node_id": "I_kwDOAZ7xs87CSS9K", "number": 59193, "title": "httpServer.keepAliveTimeout default of 5s is too low, causes subtle long-connection failures", "user": {"login": "yujiang", "id": 259463, "node_id": "MDQ6VXNlcjI1OTQ2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/259463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yujiang", "html_url": "https://github.com/yujiang", "followers_url": "https://api.github.com/users/yujiang/followers", "following_url": "https://api.github.com/users/yujiang/following{/other_user}", "gists_url": "https://api.github.com/users/yujiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yujiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yujiang/subscriptions", "organizations_url": "https://api.github.com/users/yujiang/orgs", "repos_url": "https://api.github.com/users/yujiang/repos", "events_url": "https://api.github.com/users/yujiang/events{/privacy}", "received_events_url": "https://api.github.com/users/yujiang/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2025-07-24T11:37:59Z", "updated_at": "2025-07-24T11:43:19Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "---\n\n### Description\n\nI'd like to share a real production experience and suggest a change to the default value of `httpServer.keepAliveTimeout`.\n\nIt took us **over a year** to diagnose a network issue caused by this silent but critical default.\n\n---\n\n### The Problem\n\nNode.js sets the default `http.Server.keepAliveTimeout` to **5000ms (5s)**.  \nHowever, this is far shorter than the default expectations in:\n\n- browsers (usually 60s),\n- reverse proxies like Nginx,\n- and mobile HTTP stacks (such as WeChat Mini Game client).\n\n#### This led to:\n\n- Unexpected disconnections between HTTP keep-alive requests;\n- Difficult-to-reproduce API failures and silent drops;\n- No error logs on server or client \u2014 making diagnosis extremely hard.\n\n---\n\n### Our Debugging Journey\n\n1. Suspected Nginx misconfiguration.\n2. Suspected WeChat client or its proxy.\n3. Suspected Wi-Fi/mobile network instability.\n4. **Finally**, one of our developers asked an **AI assistant**, which identified the root cause instantly.\n\nThis issue cost us significant time and frustration.\n\n---\n\n### Reproduction Example\n\n```js\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n  setTimeout(() => {\n    res.end('hello');\n  }, 6000); // response delayed beyond keepAliveTimeout\n});\n\nserver.listen(8080);\n```\n\nWith default settings, the server will close the connection before responding.\n\n---\n\n### Workaround\n\n```js\nserver.keepAliveTimeout = 60000; // Set to 60s explicitly\n```\n\n---\n\n### Suggestion\n\n- **Increase the default** to 60s (industry standard);\n- Or at least **log a warning** when using the default 5s value;\n- Or improve documentation to highlight this sharp edge.\n\n---\n\n### Why It Matters\n\nSilent timeouts cause real-world pain and are extremely hard to detect.  \nMost developers don't know to check `keepAliveTimeout`, especially when using frameworks like Express or behind proxies.\n\nChanging this one default would prevent countless hours of misdiagnosis.\n\nThanks for your amazing work on Node.js! \ud83d\ude4f\n", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59193/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59193/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/59124", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59124/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59124/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59124/events", "html_url": "https://github.com/nodejs/node/issues/59124", "id": 3245323993, "node_id": "I_kwDOAZ7xs87Bb7bZ", "number": 59124, "title": "Remove `synopsis.md`", "user": {"login": "avivkeller", "id": 38299977, "node_id": "MDQ6VXNlcjM4Mjk5OTc3", "avatar_url": "https://avatars.githubusercontent.com/u/38299977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avivkeller", "html_url": "https://github.com/avivkeller", "followers_url": "https://api.github.com/users/avivkeller/followers", "following_url": "https://api.github.com/users/avivkeller/following{/other_user}", "gists_url": "https://api.github.com/users/avivkeller/gists{/gist_id}", "starred_url": "https://api.github.com/users/avivkeller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avivkeller/subscriptions", "organizations_url": "https://api.github.com/users/avivkeller/orgs", "repos_url": "https://api.github.com/users/avivkeller/repos", "events_url": "https://api.github.com/users/avivkeller/events{/privacy}", "received_events_url": "https://api.github.com/users/avivkeller/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2025-07-19T13:56:08Z", "updated_at": "2025-07-22T02:32:56Z", "closed_at": null, "author_association": "MEMBER", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "In my view, [synopsis.md](https://github.com/nodejs/node/blob/main/doc/api/synopsis.md) appears to be redundant.\n\n* The [Usage](https://github.com/nodejs/node/blob/main/doc/api/synopsis.md#usage) section is essentially a less detailed version of what's already covered in [cli.md#synopsis](https://github.com/nodejs/node/blob/main/doc/api/cli.md#synopsis).\n* The [Example](https://github.com/nodejs/node/blob/main/doc/api/synopsis.md#example) section closely mirrors the content in the official guide on [getting started with Node.js](https://nodejs.org/en/learn/getting-started/introduction-to-nodejs).\n\nGiven this overlap, is there a case for removing `synopsis.md` entirely?", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59124/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59124/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/59122", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59122/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59122/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59122/events", "html_url": "https://github.com/nodejs/node/issues/59122", "id": 3245211785, "node_id": "I_kwDOAZ7xs87BbgCJ", "number": 59122, "title": "[ISSUE] Buffer.from with the encoding parameter not works as expected", "user": {"login": "farshidbeheshti", "id": 1665275, "node_id": "MDQ6VXNlcjE2NjUyNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1665275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/farshidbeheshti", "html_url": "https://github.com/farshidbeheshti", "followers_url": "https://api.github.com/users/farshidbeheshti/followers", "following_url": "https://api.github.com/users/farshidbeheshti/following{/other_user}", "gists_url": "https://api.github.com/users/farshidbeheshti/gists{/gist_id}", "starred_url": "https://api.github.com/users/farshidbeheshti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/farshidbeheshti/subscriptions", "organizations_url": "https://api.github.com/users/farshidbeheshti/orgs", "repos_url": "https://api.github.com/users/farshidbeheshti/repos", "events_url": "https://api.github.com/users/farshidbeheshti/events{/privacy}", "received_events_url": "https://api.github.com/users/farshidbeheshti/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2025-07-19T10:50:37Z", "updated_at": "2025-07-26T18:03:41Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### Node Version\nv22.12.0\n### Platform\n\n```text\n WSL 6.6.87.2-microsoft-standard-WSL2 runnig Ubuntu 24.04.01\n```\n\n### What is the bug?\n\nThe Node.js `Buffer.from('74686973206', 'hex')` method ignores the trailing `6` in the hexadecimal string `74686973206`.\nIt seems ignore the last number because the length of the input is odd(not byte-aligned). However, this can lead to inconsistency in running app If you don't check the input length in any case.\n\nIt should **pad the beginning of the string with a '0'** . For example, use `074686973206` instead to make it an even number to  print the same number as the input, when both input and output are in the same encoding: (meaning `74686973206` for this example).", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59122/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59122/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/59095", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59095/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59095/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59095/events", "html_url": "https://github.com/nodejs/node/issues/59095", "id": 3237158517, "node_id": "I_kwDOAZ7xs87A8x51", "number": 59095, "title": "Divergence in floating point behaviour between Unix and MacOS builds", "user": {"login": "robhowarth", "id": 2905897, "node_id": "MDQ6VXNlcjI5MDU4OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2905897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robhowarth", "html_url": "https://github.com/robhowarth", "followers_url": "https://api.github.com/users/robhowarth/followers", "following_url": "https://api.github.com/users/robhowarth/following{/other_user}", "gists_url": "https://api.github.com/users/robhowarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/robhowarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robhowarth/subscriptions", "organizations_url": "https://api.github.com/users/robhowarth/orgs", "repos_url": "https://api.github.com/users/robhowarth/repos", "events_url": "https://api.github.com/users/robhowarth/events{/privacy}", "received_events_url": "https://api.github.com/users/robhowarth/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2025-07-16T19:48:33Z", "updated_at": "2025-07-21T18:32:49Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### Version\n\nv22.10.0\n\n### Platform\n\n```text\nDarwin RH-MacBook-SpaceGrey.cable.virginm.net 24.5.0 Darwin Kernel Version 24.5.0: Tue Apr 22 19:54:49 PDT 2025; root:xnu-11417.121.6~2/RELEASE_ARM64_T6000 arm64\n```\n\n### Subsystem\n\n_No response_\n\n### What steps will reproduce the bug?\n\nrun the following on v22.10.0 on MacOS and on a Unix build (eg x86_64)\n\n```\nconst val = 0.0366\nconsole.log(Math.acosh(Math.cosh(val)) - val)\n```\n\n\n\n### How often does it reproduce? Is there a required condition?\n\nAlways\n\n### What is the expected behavior? Why is that the expected behavior?\n\nI expected the floating point behaviour be consistent between different platforms.\n\n### What do you see instead?\n\nThe floating point behaviour has diverged from v22.10.0 onwards.\n\nUsing the stock builds for v22.10.0 I see:\n - Unix: `2.921274333544943e-15`\n - MacOS: `2.9282132274488504e-15`\n\nThe output is also different between v22.9.0 and v22.10.0 on MacOS, whereas it's consistent from v22.9.0 to v22.10.0 on the stock Unix builds.\n\n### Additional information\n\nI think this is a result of the default for the `ffp-contract` flag changing to `on` between clang 13 and clang 14 ([release notes](https://releases.llvm.org/14.0.0/tools/clang/docs/ReleaseNotes.html#floating-point-support-in-clang)).\n\nThe binaries for MacOS for [v22.9.0](https://nodejs.org/dist/v22.9.0/node-v22.9.0-darwin-arm64.tar.xz) to [v22.10.0](https://nodejs.org/dist/v22.10.0/node-v22.10.0-darwin-arm64.tar.xz) appear to have been built with different versions of XCode. If you search for `xcode_version` in the binaries it looks like v22.9.0 was built with xcode 13 (and therefore clang 13), while v22.10.0 was built with xcode 14 (and therefore clang 14).\n\nBuilding on MacOS with and without `CXXFLAGS=\"-ffp-contract=off\"` and running the Javascript above is another way to see the difference in behaviour.\n\nIn `deps/v8/build.gn` it looks like ffp-contract is explicitly set to off for some architectures (eg [ppc64](https://github.com/nodejs/node/blob/229cc3be28eab3153c16bc55bc67d1e81c4a7067/deps/v8/BUILD.gn#L1554)). So it looks like there's some precedent for overriding default settings for `ffp-contract`. This file appears to have come from the v8 project though.\n\nThe code above with `Math.cosh` and `Math.acosh` was just the shortest example I could produce. It seems likely other functions under `Math` are impacted given the compiler output is different for several functions in ieee754.cc. There may be impacts outside of these functions also as the binary output for other modules is also different, but I wasn't able to find a short example to reproduce those differences if so.\n\nReading around it seems that other projects have been impacted by the divergence between gcc and clang in terms of the `ffp-contract` flag, and a range of approaches have been taken. So appreciate it's perhaps not clear if this should be \"fixed\". Also, it's possible this is question for the v8 project rather than nodejs given it looks like there's already been some activity around this flag there. That said, the behaviour has changed between v22.9.0 and v22.10.0 in the binaries available from nodejs.org so posting here to start.", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59095/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/59092", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59092/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59092/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59092/events", "html_url": "https://github.com/nodejs/node/issues/59092", "id": 3236770370, "node_id": "I_kwDOAZ7xs87A7TJC", "number": 59092, "title": "add new lint rule to cpp", "user": {"login": "0hmX", "id": 109351887, "node_id": "U_kgDOBoSTzw", "avatar_url": "https://avatars.githubusercontent.com/u/109351887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0hmX", "html_url": "https://github.com/0hmX", "followers_url": "https://api.github.com/users/0hmX/followers", "following_url": "https://api.github.com/users/0hmX/following{/other_user}", "gists_url": "https://api.github.com/users/0hmX/gists{/gist_id}", "starred_url": "https://api.github.com/users/0hmX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0hmX/subscriptions", "organizations_url": "https://api.github.com/users/0hmX/orgs", "repos_url": "https://api.github.com/users/0hmX/repos", "events_url": "https://api.github.com/users/0hmX/events{/privacy}", "received_events_url": "https://api.github.com/users/0hmX/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2025-07-16T17:31:31Z", "updated_at": "2025-07-21T19:02:59Z", "closed_at": null, "author_association": "CONTRIBUTOR", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "ref: https://github.com/nodejs/node/pull/58748#issuecomment-3070627231\n\nThis could be silly, but in my last PR, I did not capitalize most of the method names, and due to a miscommunication, @geeksilva97 had to fix it himself. This led to a lot of unnecessary commits and manual labor. I think this PascalCase convention for methods should be enforced by a linter, if possible. I'm not sure if there is any technical challenge to it or if it's simply too silly, so it was not done.", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59092/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59092/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/59084", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59084/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59084/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59084/events", "html_url": "https://github.com/nodejs/node/issues/59084", "id": 3235335659, "node_id": "I_kwDOAZ7xs87A103r", "number": 59084, "title": "Enable Intel CET support", "user": {"login": "tjuhaszrh", "id": 193504581, "node_id": "U_kgDOC4ilRQ", "avatar_url": "https://avatars.githubusercontent.com/u/193504581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjuhaszrh", "html_url": "https://github.com/tjuhaszrh", "followers_url": "https://api.github.com/users/tjuhaszrh/followers", "following_url": "https://api.github.com/users/tjuhaszrh/following{/other_user}", "gists_url": "https://api.github.com/users/tjuhaszrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjuhaszrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjuhaszrh/subscriptions", "organizations_url": "https://api.github.com/users/tjuhaszrh/orgs", "repos_url": "https://api.github.com/users/tjuhaszrh/repos", "events_url": "https://api.github.com/users/tjuhaszrh/events{/privacy}", "received_events_url": "https://api.github.com/users/tjuhaszrh/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2025-07-16T10:17:25Z", "updated_at": "2025-07-26T21:14:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "# Intel CET\n[Intel CET](https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html) is a security technology developed to fight memory-corruption based attacks.\n\n# Description of the issue\nAccording to guides I was able to find online ([intel presentation](https://lpc.events/event/2/contributions/147/attachments/72/83/CET-LPC-2018.pdf), [annocheck](https://sourceware.org/annobin/annobin.html/Test-cf-protection.html)), this feature should be enabled with the compilation flag `-fcf-protection` or `-fcf-protection=full`.\n\nTrying to compile nodejs (using steps from the docs) with these flags I wasn't able to pass the before mentioned annocheck test for this feature on binary **node**, even if other binaries such as **node_j2c** contained the required **.note.gnu.property** that being  **SHSTK**  (Shadow Stack) and  **IBT** (Branch Tracking).\n\nExamples from my testing:\n```\nreadelf -n node                                \n\nDisplaying notes found in: .note.gnu.build-id\n  Owner                Data size        Description\n  GNU                  0x00000014       NT_GNU_BUILD_ID (unique build ID bitstring)\n    Build ID: ceaab14cf7bb408dd175fb713cb50a75f0ab11f0\n\nDisplaying notes found in: .note.gnu.property\n  Owner                Data size        Description\n  GNU                  0x00000030       NT_GNU_PROPERTY_TYPE_0\n      Properties: x86 ISA needed: x86-64-baseline\n        x86 feature used: x86, XMM, YMM, ZMM, XSAVE, MASK\n        x86 ISA used: x86-64-baseline, x86-64-v2, x86-64-v3, x86-64-v4\n```\n```\nreadelf -n node_js2c \n\nDisplaying notes found in: .note.gnu.build-id\n  Owner                Data size        Description\n  GNU                  0x00000014       NT_GNU_BUILD_ID (unique build ID bitstring)\n    Build ID: c90bacc1964b4cf0b281541f93427a6c0080a219\n\nDisplaying notes found in: .note.gnu.property\n  Owner                Data size        Description\n  GNU                  0x00000040       NT_GNU_PROPERTY_TYPE_0\n      Properties: x86 feature: IBT, SHSTK\n        x86 ISA needed: x86-64-baseline\n        x86 feature used: x86, XMM, YMM, ZMM, XSAVE, MASK\n        x86 ISA used: x86-64-baseline, x86-64-v2, x86-64-v3, x86-64-v4\n```\n\n# Desired state\nI think it would be beneficial to enable this feature.\n\nI sadly struggle to understand what could be the issue, or how could it be fixed. My guess is that it could be connected to this description from the [annocheck](https://sourceware.org/annobin/annobin.html/Test-cf-protection.html) page:\n ` The feature is also an all-or-nothing type proposition for any process. Either all of the code in the process must have been built to support CET - in which case the feature can be enabled - or if even a single component does not support CET then it must be disabled for the entire process.`\n\nIf anyone could provide any guidance or information about the issue I would really appreciate it.\n\n", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59084/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59084/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/59073", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59073/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59073/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59073/events", "html_url": "https://github.com/nodejs/node/issues/59073", "id": 3230072326, "node_id": "I_kwDOAZ7xs87Ahv4G", "number": 59073, "title": "Progress bar and notification for installing dependencies by chocolatery or something", "user": {"login": "maxrudiy", "id": 45710002, "node_id": "MDQ6VXNlcjQ1NzEwMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/45710002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxrudiy", "html_url": "https://github.com/maxrudiy", "followers_url": "https://api.github.com/users/maxrudiy/followers", "following_url": "https://api.github.com/users/maxrudiy/following{/other_user}", "gists_url": "https://api.github.com/users/maxrudiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxrudiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxrudiy/subscriptions", "organizations_url": "https://api.github.com/users/maxrudiy/orgs", "repos_url": "https://api.github.com/users/maxrudiy/repos", "events_url": "https://api.github.com/users/maxrudiy/events{/privacy}", "received_events_url": "https://api.github.com/users/maxrudiy/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 207445406, "node_id": "MDU6TGFiZWwyMDc0NDU0MDY=", "url": "https://api.github.com/repos/nodejs/node/labels/feature%20request", "name": "feature request", "color": "0D7BDE", "default": false, "description": "Issues that request new features to be added to Node.js."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2025-07-14T21:20:39Z", "updated_at": "2025-07-16T16:37:06Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### What is the problem this feature will solve?\n\nHello. I just downloaded the latest installer for a fresh Windows 11 and selected chocolatey dependency install. It's been installing Node.js for an insane 7 hours. It\u2019s using a single CPU logic core and seems to be compiling something in the background\u2014with no notifications or progress indicators. It\u2019s really confusing.\nChocolatey v2.5.0\nUpgrading the following packages:\npython;visualstudio2019-workload-vctools\nBy upgrading, you accept licenses for the packages.\n\n### What is the feature you are proposing to solve the problem?\n\nAdd progress bar\n\n### What alternatives have you considered?\n\n_No response_", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59073/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59073/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/59069", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59069/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59069/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59069/events", "html_url": "https://github.com/nodejs/node/issues/59069", "id": 3228181656, "node_id": "I_kwDOAZ7xs87AaiSY", "number": 59069, "title": "crypto.getHashes() return empty array after enabling FIPS", "user": {"login": "as9996", "id": 130046609, "node_id": "U_kgDOB8BakQ", "avatar_url": "https://avatars.githubusercontent.com/u/130046609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/as9996", "html_url": "https://github.com/as9996", "followers_url": "https://api.github.com/users/as9996/followers", "following_url": "https://api.github.com/users/as9996/following{/other_user}", "gists_url": "https://api.github.com/users/as9996/gists{/gist_id}", "starred_url": "https://api.github.com/users/as9996/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/as9996/subscriptions", "organizations_url": "https://api.github.com/users/as9996/orgs", "repos_url": "https://api.github.com/users/as9996/repos", "events_url": "https://api.github.com/users/as9996/events{/privacy}", "received_events_url": "https://api.github.com/users/as9996/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 155267357, "node_id": "MDU6TGFiZWwxNTUyNjczNTc=", "url": "https://api.github.com/repos/nodejs/node/labels/crypto", "name": "crypto", "color": "009800", "default": false, "description": "Issues and PRs related to the crypto subsystem."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2025-07-14T10:08:47Z", "updated_at": "2025-07-16T15:40:37Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "We have an application running on Node.js v20.19.3(https://nodejs.org/dist/v20.19.3/).\nFollowed the steps listed in https://nodejs.org/dist/latest-v20.x/docs/api/crypto.html#fips-mode to enable FIPS on it.\nWe see that FIPS is enabled(as getFips() returns 1). But when I want to create a hash using SHA256, it threw an error saying 'ERR_OSSL_EVP_UNSUPPORTED'. \nOn futher analysis, we found that crypto.getHashes() is returning empty array when FIPS is enabled.\n\nThe sample program we tried is \n\n===========================================================================\nconst crypto = require('crypto');\n\ntry {\n crypto.setFips(1); // Enable FIPS\n  console.log(\"FIPS Mode:\", crypto.getFips()); // Should print 1\n  console.log(\"Available Hashes:\", crypto.getHashes()); // Should print only FIPS-compliant hashes\n} catch (err) {\n  console.error(\"FIPS error:\", err.message);\n}\n----------------------------------------------------------------------------------------------------\n\nResponse:\nFIPS Mode: 1\nAvailable Hashes: []\n\n===========================================================================\n\nBut when we set FIPS to 0 (crypto.setFips(0)), it gave a list of hashes available.\n\nWe have also tried to build Node.js from source code, and even that resulted in the same issue.\n\nCan someone help us with where we are going wrong with this?\n\n", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59069/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/59053", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59053/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59053/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59053/events", "html_url": "https://github.com/nodejs/node/issues/59053", "id": 3226681672, "node_id": "I_kwDOAZ7xs87AU0FI", "number": 59053, "title": "BroadcastChannel doesn't fill in useful MessageEvent fields like source, or ports", "user": {"login": "jdmarshall", "id": 1656505, "node_id": "MDQ6VXNlcjE2NTY1MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1656505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdmarshall", "html_url": "https://github.com/jdmarshall", "followers_url": "https://api.github.com/users/jdmarshall/followers", "following_url": "https://api.github.com/users/jdmarshall/following{/other_user}", "gists_url": "https://api.github.com/users/jdmarshall/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdmarshall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdmarshall/subscriptions", "organizations_url": "https://api.github.com/users/jdmarshall/orgs", "repos_url": "https://api.github.com/users/jdmarshall/repos", "events_url": "https://api.github.com/users/jdmarshall/events{/privacy}", "received_events_url": "https://api.github.com/users/jdmarshall/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 868621832, "node_id": "MDU6TGFiZWw4Njg2MjE4MzI=", "url": "https://api.github.com/repos/nodejs/node/labels/worker", "name": "worker", "color": "94fffb", "default": false, "description": "Issues and PRs related to Worker support."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2025-07-13T17:33:29Z", "updated_at": "2025-07-22T06:58:51Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### Version\n\n_No response_\n\n### Platform\n\n```text\nThis makes it difficult to use BroadcastChannel to set up coordinations between worker threads unless they share the same supervisor. \n\nWhich is problematic for things like caching or telemetry.\n\n\nMessageEvent {\n  type: 'message',\n  defaultPrevented: false,\n  cancelable: false,\n  timeStamp: 444.018666\n}\n\nports, source are empty strings.\n```\n\n### Subsystem\n\nnode:worker_threads\n\n### What steps will reproduce the bug?\n\n```\n        const util = require('util');\n\tconst channel = new BroadcastChannel('example');\n\n\tif (isMainThread) {\n\t\tchannel.addEventListener('message', evt => {\n\t\t\tconsole.log(util.inspect(evt)); // breakpoint here\n\t\t});\n\t} else {\n\t\tchannel.postMessage('hello');\n        }\n```\n\n### How often does it reproduce? Is there a required condition?\n\nAlways.  Seems to be by design, and the design may have drifted from the current web standards over time.\n\n### What is the expected behavior? Why is that the expected behavior?\n\nThat I get some metadata\n\n### What do you see instead?\n\nempty string, empty array.\n\n### Additional information\n\n_No response_", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59053/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/59015", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59015/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59015/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59015/events", "html_url": "https://github.com/nodejs/node/issues/59015", "id": 3217562730, "node_id": "I_kwDOAZ7xs86_yBxq", "number": 59015, "title": "Enhance `path.matchesGlob` to support exclusion patterns and options (parity with `fs.glob`)", "user": {"login": "mizulu", "id": 202852165, "node_id": "U_kgDODBdHRQ", "avatar_url": "https://avatars.githubusercontent.com/u/202852165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mizulu", "html_url": "https://github.com/mizulu", "followers_url": "https://api.github.com/users/mizulu/followers", "following_url": "https://api.github.com/users/mizulu/following{/other_user}", "gists_url": "https://api.github.com/users/mizulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/mizulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mizulu/subscriptions", "organizations_url": "https://api.github.com/users/mizulu/orgs", "repos_url": "https://api.github.com/users/mizulu/repos", "events_url": "https://api.github.com/users/mizulu/events{/privacy}", "received_events_url": "https://api.github.com/users/mizulu/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 207445406, "node_id": "MDU6TGFiZWwyMDc0NDU0MDY=", "url": "https://api.github.com/repos/nodejs/node/labels/feature%20request", "name": "feature request", "color": "0D7BDE", "default": false, "description": "Issues that request new features to be added to Node.js."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2025-07-10T01:15:29Z", "updated_at": "2025-07-14T00:29:09Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "\n\n### What is the problem this feature will solve?\n------------------------------------------------\nCurrently, the `fs.glob` function in Node.js allows specifying advanced options such as `exclude` patterns, which not only exclude the specified path but also all its descendants from matching results. In contrast, `path.matchesGlob` only matches a glob pattern to an input string without supporting exclude patterns or additional options.\n\nThere is no way to replicate the full matching logic of `fs.glob` (including exclude semantics) using `path.matchesGlob` alone on a list of paths, such as when working with a virtual filesystem.\n\nExample:\n  - `fs.glob({ include: '**/*', exclude: ['folder_a/folder_b'] })` will exclude `folder_a/folder_b` and all its contents.\n  - However, using only `path.matchesGlob`, one cannot easily achieve the same exclusion behavior because the exclude pattern only matches the exact path, not its descendants.\n\n\n### What is the feature you are proposing to solve the problem?\n----------------------------------------------------------\n- Allow `path.matchesGlob` to accept an options argument (e.g., `{ exclude: [...] }`, and/or other options supported by `fs.glob`).\n- Ensure that exclusion patterns work the same way as in `fs.glob`, i.e., they exclude the matched path and all its descendants.\n- This will enable users to apply consistent glob-matching logic both for real file systems and for lists of paths (e.g., in virtual filesystems or in-memory path lists).\n\nExample API:\n```js\nconst include = '**/*';\nconst exclude = ['folder_a/folder_b'];\nconst path = 'folder_a/folder_b/file.js';\npath.matchesGlob(path, include, { exclude }); // returns false\n```\n\n\n### What alternatives have you considered?\n--------------------------------------\n- Manually replicating exclusion logic by writing custom code to check if a path is a descendant of any excluded folder. This approach is error-prone and leads to code duplication.\n\n\nThe proposed enhancement would provide parity and consistency between `fs.glob` and `path.matchesGlob`, improving developer experience and flexibility.\n\n\n", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59015/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59015/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/59012", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/59012/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/59012/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/59012/events", "html_url": "https://github.com/nodejs/node/issues/59012", "id": 3216362797, "node_id": "I_kwDOAZ7xs86_tc0t", "number": 59012, "title": "undici's globalDispatcher missing methods when also importing node:http", "user": {"login": "vivedo", "id": 17903178, "node_id": "MDQ6VXNlcjE3OTAzMTc4", "avatar_url": "https://avatars.githubusercontent.com/u/17903178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vivedo", "html_url": "https://github.com/vivedo", "followers_url": "https://api.github.com/users/vivedo/followers", "following_url": "https://api.github.com/users/vivedo/following{/other_user}", "gists_url": "https://api.github.com/users/vivedo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vivedo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vivedo/subscriptions", "organizations_url": "https://api.github.com/users/vivedo/orgs", "repos_url": "https://api.github.com/users/vivedo/repos", "events_url": "https://api.github.com/users/vivedo/events{/privacy}", "received_events_url": "https://api.github.com/users/vivedo/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2025-07-09T15:37:39Z", "updated_at": "2025-07-22T08:46:09Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### Version\n\n22.5 through 22.17\n\n### Platform\n\n```text\nDarwin 24.5.0 Darwin Kernel Version 24.5.0\n```\n\n### Subsystem\n\n_No response_\n\n### What steps will reproduce the bug?\n\n```js\nimport 'node:http';\nimport undici from 'undici';\n\nconsole.log(undici.getGlobalDispatcher().request) // undefined\n```\n\n### How often does it reproduce? Is there a required condition?\n\nAlways\n\n### What is the expected behavior? Why is that the expected behavior?\n\nUndici's globalDispatcher (from its superclass Dispatcher) should have methods `request`, `stream`, `pipeline`, `upgrade`, `connect` \n\n### What do you see instead?\n\nglobalDispatcher Agent is lacking all of those methods\n\n### Additional information\n\n - external undici version does not affect the issue \n - starting from node 22.5.0, the http module requires internal undici 6.x: https://github.com/nodejs/node/commit/a1869fa87e874e81e7f1470687c8498ef35e1e95\n - the issue does not occur when using undici 6.x without importing the http module\n - node 24.x, which does not exhibit the issue, uses undici 7.x internally\n - when http is imported, `undici.getGlobalDispatcher() instanceof undici.Dispatcher` returns false. I assume this happens because the default globalDispatcher resides in globalThis and [is initialized by the built-in version of undici](https://github.com/nodejs/node/blob/v22.17.0/deps/undici/src/lib/global.js#L9)\n```js\nimport 'node:http';\nimport undici from 'undici';\n\nconsole.log(undici.getGlobalDispatcher() instanceof undici.Dispatcher) // false\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/59012/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/59012/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58994", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58994/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58994/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58994/events", "html_url": "https://github.com/nodejs/node/issues/58994", "id": 3213297530, "node_id": "I_kwDOAZ7xs86_hwd6", "number": 58994, "title": "Make `--print` respect --input-type=module", "user": {"login": "mmkal", "id": 15040698, "node_id": "MDQ6VXNlcjE1MDQwNjk4", "avatar_url": "https://avatars.githubusercontent.com/u/15040698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmkal", "html_url": "https://github.com/mmkal", "followers_url": "https://api.github.com/users/mmkal/followers", "following_url": "https://api.github.com/users/mmkal/following{/other_user}", "gists_url": "https://api.github.com/users/mmkal/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmkal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmkal/subscriptions", "organizations_url": "https://api.github.com/users/mmkal/orgs", "repos_url": "https://api.github.com/users/mmkal/repos", "events_url": "https://api.github.com/users/mmkal/events{/privacy}", "received_events_url": "https://api.github.com/users/mmkal/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 207445406, "node_id": "MDU6TGFiZWwyMDc0NDU0MDY=", "url": "https://api.github.com/repos/nodejs/node/labels/feature%20request", "name": "feature request", "color": "0D7BDE", "default": false, "description": "Issues that request new features to be added to Node.js."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2025-07-08T17:38:54Z", "updated_at": "2025-07-14T08:19:14Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### What is the problem this feature will solve?\n\nThis doesn't work, but it should:\n\n```\nnode -p 'await Promise.resolve(123)' --input-type=module\n```\n\nRelated to https://github.com/nodejs/node/issues/45924#issuecomment-2751207324 - but that was about --print and --eval. It seems to be fixed for `--eval` but not for `--print`\n\nNote: `bun -p 'await Promise.resolve(123)'` works\n\n### What is the feature you are proposing to solve the problem?\n\nMake a similar change to whatever fixed #45924 \n\n### What alternatives have you considered?\n\nbun\n\nNote: `node -e 'console.log(await Promise.resolve(123))' --input-type=module` does work, but it's not always possible to use a console.log, especially when using `node -p` in a piped bash expression", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58994/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58994/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58991", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58991/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58991/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58991/events", "html_url": "https://github.com/nodejs/node/issues/58991", "id": 3212610125, "node_id": "I_kwDOAZ7xs86_fIpN", "number": 58991, "title": "fs.glob  `excludes` patterns and input pattern uses different casing (case-sensitive) windows", "user": {"login": "mizulu", "id": 202852165, "node_id": "U_kgDODBdHRQ", "avatar_url": "https://avatars.githubusercontent.com/u/202852165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mizulu", "html_url": "https://github.com/mizulu", "followers_url": "https://api.github.com/users/mizulu/followers", "following_url": "https://api.github.com/users/mizulu/following{/other_user}", "gists_url": "https://api.github.com/users/mizulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/mizulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mizulu/subscriptions", "organizations_url": "https://api.github.com/users/mizulu/orgs", "repos_url": "https://api.github.com/users/mizulu/repos", "events_url": "https://api.github.com/users/mizulu/events{/privacy}", "received_events_url": "https://api.github.com/users/mizulu/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 155435785, "node_id": "MDU6TGFiZWwxNTU0MzU3ODU=", "url": "https://api.github.com/repos/nodejs/node/labels/fs", "name": "fs", "color": "0052cc", "default": false, "description": "Issues and PRs related to the fs subsystem / file system."}, {"id": 166236401, "node_id": "MDU6TGFiZWwxNjYyMzY0MDE=", "url": "https://api.github.com/repos/nodejs/node/labels/windows", "name": "windows", "color": "9944dd", "default": false, "description": "Issues and PRs related to the Windows platform."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2025-07-08T13:39:49Z", "updated_at": "2025-07-09T00:18:17Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### Version\n\n24.3.0\n\n### Platform\n\n```text\nx64 windows\n```\n\n### Subsystem\n\n_No response_\n\n### What steps will reproduce the bug?\n\non windows \n\nfiles structure\n```\nroot\n   |_ a\n       | node_modules\n```\n\n```js\nlet r = await glob(\"a/node_moduleS\", {\n    cwd: \"root\",\n})\n\nlet files = await Array.fromAsync(r)\nconsole.log(files);\n```\noutput \n```\n ['a'\\\\node_moduleS`]\n```\n\nThis is the first issue, the result preserves the original glob casing instead of the casing on the filesystem\n\nexpected\n```diff\n-['a'\\\\node_moduleS`]\n+['a'\\\\node_modules`]\n```\n\n\nwhen we try to exclude with the actual casing on the filesystem\nthe exclude actually uses case aware, and in this case it fails to exclude the actual path\non the file system\n\n\n```js\nlet r = await glob(\"a/node_moduleS\", {\n    cwd: \"root\",\n    exclude: [\"a/node_modules\"]\n})\n\nlet files = await Array.fromAsync(r)\nconsole.log(files);\n```\n\noutput \n```\n[ 'a\\\\node_moduleS' ]\n```\n\ninstead of the expected \n```diff\n-  [ 'a\\\\node_moduleS' ]\n+ []\n```\n\n### How often does it reproduce? Is there a required condition?\n\nalways \n\n### What is the expected behavior? Why is that the expected behavior?\n\n1. globing should always return the actual casing from the filesystem\n2. if the glob pattern is case insensitive so should the exclude patterns.\n3. we should be able to configure the casing of the matcher because on windows  we may have case sensitive file system too. see final note for the proposal of enhancement  \n \n\n### What do you see instead?\n\n1. on windows the glob results are returned with the casing of the pattern instead of preserving the filesystem casing\n2. the exclude patterns are case sensitive \n\n### Additional information\n\nAdditionally I think the glob case sensitive should be configurable \neither be explicitly \n\n```js\n await glob(\"a/node_moduleS\", {\n    cwd: \"root\",\n    casing: \"default\",     // default - window case-insensitive , linux - case sensitive\n                           // yes     - case sensitive regardless of operation system \n                           // no      - case insensitive regardless of operation system\n})\n```\n\nwindows also supports case sensitive file system as you can see here \nhttps://learn.microsoft.com/en-us/windows/wsl/case-sensitivity\n\n<img width=\"1226\" height=\"600\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/3fe9c1f5-2d65-46f7-b97d-19f64a216a96\" />\n", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58991/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58991/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58987", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58987/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58987/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58987/events", "html_url": "https://github.com/nodejs/node/issues/58987", "id": 3211012197, "node_id": "I_kwDOAZ7xs86_ZChl", "number": 58987, "title": "Update QuotaExceededError handling", "user": {"login": "domenic", "id": 617481, "node_id": "MDQ6VXNlcjYxNzQ4MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/617481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domenic", "html_url": "https://github.com/domenic", "followers_url": "https://api.github.com/users/domenic/followers", "following_url": "https://api.github.com/users/domenic/following{/other_user}", "gists_url": "https://api.github.com/users/domenic/gists{/gist_id}", "starred_url": "https://api.github.com/users/domenic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domenic/subscriptions", "organizations_url": "https://api.github.com/users/domenic/orgs", "repos_url": "https://api.github.com/users/domenic/repos", "events_url": "https://api.github.com/users/domenic/events{/privacy}", "received_events_url": "https://api.github.com/users/domenic/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 6133517765, "node_id": "LA_kwDOAZ7xs88AAAABbZYNxQ", "url": "https://api.github.com/repos/nodejs/node/labels/web-standards", "name": "web-standards", "color": "3522A8", "default": false, "description": "Issues and PRs related to Web APIs"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2025-07-08T04:48:46Z", "updated_at": "2025-07-13T13:03:05Z", "closed_at": null, "author_association": "CONTRIBUTOR", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "https://github.com/whatwg/webidl/pull/1465 updates QuotaExceededError from a specific DOMException name, to a subclass of DOMException.\n\nNode could either:\n\n- Do the minimal thing, and remove \"QuotaExceededError\" from the DOMException names table, so that `(new DOMException(\"message\", \"QuotaExceededError\")).code === 0`; or\n- Do the minimal thing, plus also implement `QuotaExceededError`.", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58987/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58987/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58981", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58981/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58981/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58981/events", "html_url": "https://github.com/nodejs/node/issues/58981", "id": 3209024782, "node_id": "I_kwDOAZ7xs86_RdUO", "number": 58981, "title": "fs.glob is stable as of v24 but lacks any documentation regarding `pattern` argument", "user": {"login": "iamstarkov", "id": 559321, "node_id": "MDQ6VXNlcjU1OTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/559321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iamstarkov", "html_url": "https://github.com/iamstarkov", "followers_url": "https://api.github.com/users/iamstarkov/followers", "following_url": "https://api.github.com/users/iamstarkov/following{/other_user}", "gists_url": "https://api.github.com/users/iamstarkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/iamstarkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iamstarkov/subscriptions", "organizations_url": "https://api.github.com/users/iamstarkov/orgs", "repos_url": "https://api.github.com/users/iamstarkov/repos", "events_url": "https://api.github.com/users/iamstarkov/events{/privacy}", "received_events_url": "https://api.github.com/users/iamstarkov/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 155267517, "node_id": "MDU6TGFiZWwxNTUyNjc1MTc=", "url": "https://api.github.com/repos/nodejs/node/labels/doc", "name": "doc", "color": "006b75", "default": false, "description": "Issues and PRs related to the documentations."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2025-07-07T13:21:31Z", "updated_at": "2025-07-08T10:12:53Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### Affected URL(s)\n\nhttps://nodejs.org/docs/latest/api/fs.html#fsglobpattern-options-callback \n\n### Description of the problem\n\nLove that native glob support came to node, however fs.glob is stable as of v24 but lacks documentation regarding `pattern` argument which is confusing, unhelpful and deterring adoption if you come from plethora of user land implementations. For once it prevents me from using it in my cli (edit files by glob patterns), because I can't tell to my cli's users how to write the patterns.\n\nI'm looking for documentation for glob's aspects: platform support, performance, supported features.\n\nI'd love to see following popular features mentioned. It will help to know if feature is supported or not, if there any caveats and examples showcasing how feature works.\n\n* Brace Expansion (`foo/{1..5}.md`, `bar/{a,b,c}.js`)\n* Extended glob matching, [extglobs](https://www.npmjs.com/package/micromatch#extglobs) (`+(x|y)`, `!(a|b)`)\n* \"Globstar\" ** matching, wildcards (`**`, `*.js`)\n* [Posix character classes](https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html)  (`[[:alpha:][:digit:]]`)\n* Support for multiple glob patterns\n* Negation (`'!a/*.js'`, `'*!(b).js'`)\n* regex character classes (`foo-[1-5].js`)\n* regex logical \"or\" (`foo/(abc|xyz).js`)\n\nComparison examples with user land libraries like glob, minimatch, micromatch, fast-glob will be helpful too.\n\nMaybe text based matching (without `fs` or `path` involved) can be moved to `global` or `utils` packages and documented in depth there?", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58981/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58981/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58975", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58975/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58975/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58975/events", "html_url": "https://github.com/nodejs/node/issues/58975", "id": 3206638533, "node_id": "I_kwDOAZ7xs86_IWvF", "number": 58975, "title": "Incorrect selection of x64 push_registers_asm.cc for host build when target is arm (Android)", "user": {"login": "ghhccghk", "id": 36808766, "node_id": "MDQ6VXNlcjM2ODA4NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/36808766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghhccghk", "html_url": "https://github.com/ghhccghk", "followers_url": "https://api.github.com/users/ghhccghk/followers", "following_url": "https://api.github.com/users/ghhccghk/following{/other_user}", "gists_url": "https://api.github.com/users/ghhccghk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghhccghk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghhccghk/subscriptions", "organizations_url": "https://api.github.com/users/ghhccghk/orgs", "repos_url": "https://api.github.com/users/ghhccghk/repos", "events_url": "https://api.github.com/users/ghhccghk/events{/privacy}", "received_events_url": "https://api.github.com/users/ghhccghk/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2025-07-06T14:50:19Z", "updated_at": "2025-07-09T01:51:20Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### Problem\n\nWhile cross-compiling Node.js (with V8) for Android (target CPU: arm, target OS: android), the build fails during **host-side tool compilation** because the wrong architecture-specific source file is selected.\n\nSpecifically, the file `deps/v8/src/heap/base/asm/x64/push_registers_asm.cc` is incorrectly selected for the **host-side build**, but it's compiled with `-m32`, resulting in the following error:\n\n```\n\n2025-07-06T04:00:48.2384529Z   clang++ -o /home/runner/node/out/Release/obj.host/v8_base_without_compiler/deps/v8/src/heap/base/asm/x64/push_registers_asm.o ../deps/v8/src/heap/base/asm/x64/push_registers_asm.cc '-D_GLIBCXX_USE_CXX11_ABI=1' '-D_FILE_OFFSET_BITS=64' '-DNODE_OPENSSL_CONF_NAME=nodejs_conf' '-DICU_NO_USER_DATA_OVERRIDE' '-DV8_GYP_BUILD' '-DV8_TYPED_ARRAY_MAX_SIZE_IN_HEAP=64' '-D__STDC_FORMAT_MACROS' '-DOPENSSL_THREADS' '-DOPENSSL_NO_ASM' '-DV8_TARGET_ARCH_ARM' '-DCAN_USE_ARMV7_INSTRUCTIONS' '-DCAN_USE_VFP3_INSTRUCTIONS' '-DCAN_USE_VFP32DREGS' '-DV8_HAVE_TARGET_OS' '-DV8_TARGET_OS_ANDROID' '-DV8_EMBEDDER_STRING=\"-node.26\"' '-DENABLE_DISASSEMBLER' '-DV8_PROMISE_INTERNAL_FIELD_COUNT=1' '-DOBJECT_PRINT' '-DV8_ATOMIC_OBJECT_FIELD_WRITES' '-DV8_ENABLE_LAZY_SOURCE_POSITIONS' '-DV8_USE_SIPHASH' '-DV8_SHARED_RO_HEAP' '-DNDEBUG' '-DV8_WIN64_UNWINDING_INFO' '-DV8_ENABLE_REGEXP_INTERPRETER_THREADED_DISPATCH' '-DV8_USE_ZLIB' '-DV8_ENABLE_SPARKPLUG' '-DV8_ENABLE_TURBOFAN' '-DV8_ENABLE_WEBASSEMBLY' '-DV8_ENABLE_JAVASCRIPT_PROMISE_HOOKS' '-DV8_ENABLE_CONTINUATION_PRESERVED_EMBEDDER_DATA' '-DV8_ALLOCATION_FOLDING' '-DV8_ALLOCATION_SITE_TRACKING' '-DV8_ADVANCED_BIGINT_ALGORITHMS' '-DUSE_EABI_HARDFLOAT=0' -I../deps/v8 -I../deps/v8/include -I/home/runner/node/out/Release/obj/gen/inspector-generated-output-root -I../deps/v8/third_party/inspector_protocol -I/home/runner/node/out/Release/obj/gen -I/home/runner/node/out/Release/obj/gen/inspector-generated-output-root/include -I/home/runner/node/out/Release/obj/gen/generate-bytecode-output-root -I../deps/v8/third_party/zlib -I../deps/v8/third_party/zlib/google -I../deps/v8/third_party/fp16/src/include -I../deps/v8/third_party/abseil-cpp  -Wno-unused-parameter -fPIC -m64 -pthread -m32 -fno-omit-frame-pointer -fPIC -I/home/runner/android-ndk-r27c/sources/android/cpufeatures -fdata-sections -ffunction-sections -O2 -fno-rtti -fno-exceptions -fno-strict-aliasing -std=gnu++20 -Wno-invalid-offsetof -MMD -MF /home/runner/node/out/Release/.deps//home/runner/node/out/Release/obj.host/v8_base_without_compiler/deps/v8/src/heap/base/asm/x64/push_registers_asm.o.d.raw   -c\n2025-07-06T04:00:48.4991368Z <inline asm>:5:8: error: register %rbp is only available in 64-bit mode\n2025-07-06T04:00:48.5110513Z     5 |   push %rbp                                        \n2025-07-06T04:00:48.5260675Z       |        ^\n2025-07-06T04:00:48.5270914Z <inline asm>:6:7: error: register %rsp is only available in 64-bit mode\n2025-07-06T04:00:48.5271608Z     6 |   mov %rsp, %rbp                                   \n2025-07-06T04:00:48.5620832Z       |       ^\n2025-07-06T04:00:48.5680614Z <inline asm>:8:8: error: register %rbx is only available in 64-bit mode\n2025-07-06T04:00:48.5953695Z     8 |   push %rbx                                        \n2025-07-06T04:00:48.5954143Z       |        ^\n2025-07-06T04:00:48.5956474Z <inline asm>:9:8: error: register %r12 is only available in 64-bit mode\n2025-07-06T04:00:48.6030583Z     9 |   push %r12                                        \n2025-07-06T04:00:48.6031022Z       |        ^\n2025-07-06T04:00:48.6031468Z <inline asm>:10:8: error: register %r13 is only available in 64-bit mode\n2025-07-06T04:00:48.6032093Z    10 |   push %r13                                        \n2025-07-06T04:00:48.6032754Z       |        ^\n2025-07-06T04:00:48.6033192Z <inline asm>:11:8: error: register %r14 is only available in 64-bit mode\n2025-07-06T04:00:48.6033767Z    11 |   push %r14                                        \n2025-07-06T04:00:48.6034206Z       |        ^\n2025-07-06T04:00:48.6034657Z <inline asm>:12:8: error: register %r15 is only available in 64-bit mode\n2025-07-06T04:00:48.6035276Z    12 |   push %r15                                        \n2025-07-06T04:00:48.6035710Z       |        ^\n2025-07-06T04:00:48.6036158Z <inline asm>:13:7: error: register %rdx is only available in 64-bit mode\n2025-07-06T04:00:48.6036748Z    13 |   mov %rdx, %r8                                    \n2025-07-06T04:00:48.6037168Z       |       ^\n2025-07-06T04:00:48.6037624Z <inline asm>:14:7: error: register %rsp is only available in 64-bit mode\n2025-07-06T04:00:48.6038406Z    14 |   mov %rsp, %rdx                                   \n2025-07-06T04:00:48.6038866Z       |       ^\n2025-07-06T04:00:48.6039328Z <inline asm>:15:9: error: register %r8 is only available in 64-bit mode\n2025-07-06T04:00:48.6040168Z    15 |   call *%r8                                        \n2025-07-06T04:00:48.6040608Z       |         ^\n2025-07-06T04:00:48.6041079Z <inline asm>:16:12: error: register %rsp is only available in 64-bit mode\n2025-07-06T04:00:48.6041716Z    16 |   add $48, %rsp                                    \n2025-07-06T04:00:48.6042148Z       |            ^\n2025-07-06T04:00:48.6042623Z <inline asm>:17:7: error: register %rbp is only available in 64-bit mode\n2025-07-06T04:00:48.6043250Z    17 |   pop %rbp                                         \n2025-07-06T04:00:48.6043688Z       |       ^\n2025-07-06T04:00:48.6044009Z 12 errors generated.\n2025-07-06T04:00:48.6045421Z make[1]: *** [tools/v8_gypfiles/v8_base_without_compiler.host.mk:1031: /home/runner/node/out/Release/obj.host/v8_base_without_compiler/deps/v8/src/heap/base/asm/x64/push_registers_asm.o] Error 1\n2025-07-06T04:00:48.6046818Z make[1]: *** Waiting for unfinished jobs....\n2025-07-06T04:01:32.1166874Z rm 0771b9c84932384d067db46f8c6bf74701e1920a.intermediate 1f1206d9a5609d053b5bfe8d816f99705b11c301.intermediate ed1beb6a745bbc19ddf2f2424646cfbc9813407a.intermediate 5a363a65ac6ae65c9df5c0b3dfbecf1b5dbd42fb.intermediate\n2025-07-06T04:01:32.1290208Z make: *** [Makefile:135: node] Error 2\n```\n\nI don't know how to go about fixing it at the moment, **so I've opened up issue to ask**\n\n\n### Compilation Environment Information\n#### NodeJs Code Version : 22.17.0 lts\n#### Ubuntu 24.04 for GitHub Actions\n- OS Version: 24.04.2 LTS\n- Kernel Version: 6.11.0-1015-azure\n- Image Version: 20250622.1.0\n- Systemd version: 255.4-1ubuntu8.8\n#### Android NDK is r27c\n#### Configure the compiled code as\n```\nexport CXX_host=\"clang++\"\nexport CC_host=\"clang\"\n./android-configure ~/android-ndk-r27c 29 arm\nmake -j32 LDFLAGS=\"-Wl,-z,max-page-size=16384 -L/home/ghhc/android-ndk-r27c/obj/local/arm64-v8a -lcpufeatures -Wl,--gc-sections\" CFLAGS=\"-Os -fdata-sections -ffunction-sections\"\n```\n\n### There's another patch.\n\n\n```\ndiff --git a/android_configure.py b/android_configure.py\nindex 5cea0393..0aa3c63a 100644\n--- a/android_configure.py\n+++ b/android_configure.py\n@@ -71,7 +71,8 @@ GYP_DEFINES += \" v8_target_arch=\" + arch\n GYP_DEFINES += \" android_target_arch=\" + arch\n GYP_DEFINES += \" host_os=\" + host_os + \" OS=android\"\n GYP_DEFINES += \" android_ndk_path=\" + android_ndk_path\n+\n os.environ['GYP_DEFINES'] = GYP_DEFINES\n\n if os.path.exists(\"./configure\"):\n-    os.system(\"./configure --dest-cpu=\" + DEST_CPU + \" --dest-os=android --openssl-no-asm --cross-compiling\")\n+    os.system(\"./configure --dest-cpu=\" + DEST_CPU + \" --dest-os=android --cross-compiling --openssl-no-asm --partly-static --with-intl=none --shared\")\ndiff --git a/deps/v8/src/base/debug/stack_trace_posix.cc b/deps/v8/src/base/debug/stack_trace_posix.cc\nindex 0a22cc8a..2ebc0077 100644\n--- a/deps/v8/src/base/debug/stack_trace_posix.cc\n+++ b/deps/v8/src/base/debug/stack_trace_posix.cc\n@@ -37,6 +37,17 @@\n #include <AvailabilityMacros.h>\n #endif\n\n+#if defined(__ANDROID__)\n+extern \"C\" int backtrace(void**, int) {\n+  return 0;\n+}\n+\n+extern \"C\" char** backtrace_symbols(void* const*, int) {\n+  return nullptr;\n+}\n+#endif\n+\n+\n #include \"src/base/build_config.h\"\n #include \"src/base/free_deleter.h\"\n #include \"src/base/logging.h\"\ndiff --git a/deps/v8/src/base/small-vector.h b/deps/v8/src/base/small-vector.h\nindex edaab3a7..16d6c616 100644\n--- a/deps/v8/src/base/small-vector.h\n+++ b/deps/v8/src/base/small-vector.h\n@@ -22,7 +22,7 @@ template <typename T, size_t kSize, typename Allocator = std::allocator<T>>\n class SmallVector {\n   // Currently only support trivially copyable and trivially destructible data\n   // types, as it uses memcpy to copy elements and never calls destructors.\n-  ASSERT_TRIVIALLY_COPYABLE(T);\n+  // ASSERT_TRIVIALLY_COPYABLE(T);\n   static_assert(std::is_trivially_destructible<T>::value);\n\n  public:\ndiff --git a/deps/v8/src/trap-handler/trap-handler.h b/deps/v8/src/trap-handler/trap-handler.h\nindex 4bf95b8c..be28d784 100644\n--- a/deps/v8/src/trap-handler/trap-handler.h\n+++ b/deps/v8/src/trap-handler/trap-handler.h\n@@ -17,52 +17,7 @@ namespace v8 {\n namespace internal {\n namespace trap_handler {\n\n-// X64 on Linux, Windows, MacOS, FreeBSD.\n-#if V8_HOST_ARCH_X64 && V8_TARGET_ARCH_X64 &&                        \\\n-    ((V8_OS_LINUX && !V8_OS_ANDROID) || V8_OS_WIN || V8_OS_DARWIN || \\\n-     V8_OS_FREEBSD)\n-#define V8_TRAP_HANDLER_SUPPORTED true\n-// Arm64 (non-simulator) on Mac and Linux.\n-#elif V8_TARGET_ARCH_ARM64 && V8_HOST_ARCH_ARM64 && \\\n-    (V8_OS_DARWIN || (V8_OS_LINUX && !V8_OS_ANDROID))\n-#define V8_TRAP_HANDLER_SUPPORTED true\n-// Arm64 simulator on x64 on Linux, Mac, or Windows.\n-//\n-// The simulator case uses some inline assembly code, which cannot be\n-// compiled with MSVC, so don't enable the trap handler in that case.\n-// (MSVC #defines _MSC_VER, but so does Clang when targeting Windows, hence\n-// the check for __clang__.)\n-#elif V8_TARGET_ARCH_ARM64 && V8_HOST_ARCH_X64 && \\\n-    (V8_OS_LINUX || V8_OS_DARWIN || V8_OS_WIN) && \\\n-    (!defined(_MSC_VER) || defined(__clang__))\n-#define V8_TRAP_HANDLER_VIA_SIMULATOR\n-#define V8_TRAP_HANDLER_SUPPORTED true\n-// Loong64 (non-simulator) on Linux.\n-#elif V8_TARGET_ARCH_LOONG64 && V8_HOST_ARCH_LOONG64 && V8_OS_LINUX\n-#define V8_TRAP_HANDLER_SUPPORTED true\n-// Loong64 simulator on x64 on Linux\n-#elif V8_TARGET_ARCH_LOONG64 && V8_HOST_ARCH_X64 && V8_OS_LINUX\n-#define V8_TRAP_HANDLER_VIA_SIMULATOR\n-#define V8_TRAP_HANDLER_SUPPORTED true\n-// RISCV64 (non-simulator) on Linux.\n-#elif V8_TARGET_ARCH_RISCV64 && V8_HOST_ARCH_RISCV64 && V8_OS_LINUX\n-#define V8_TRAP_HANDLER_SUPPORTED true\n-// RISCV64 simulator on x64 on Linux\n-#elif V8_TARGET_ARCH_RISCV64 && V8_HOST_ARCH_X64 && V8_OS_LINUX\n-#define V8_TRAP_HANDLER_VIA_SIMULATOR\n-#define V8_TRAP_HANDLER_SUPPORTED true\n-// Everything else is unsupported.\n-#else\n #define V8_TRAP_HANDLER_SUPPORTED false\n-#endif\n-\n-#if V8_OS_ANDROID && V8_TRAP_HANDLER_SUPPORTED\n-// It would require some careful security review before the trap handler\n-// can be enabled on Android.  Android may do unexpected things with signal\n-// handling and crash reporting that could open up security holes in V8's\n-// trap handling.\n-#error \"The V8 trap handler should not be enabled on Android\"\n-#endif\n\n // Setup for shared library export.\n #if defined(BUILDING_V8_SHARED_PRIVATE) && defined(V8_OS_WIN)\ndiff --git a/tools/v8_gypfiles/v8.gyp b/tools/v8_gypfiles/v8.gyp\nindex 66b2f73c..12f69bbc 100644\n--- a/tools/v8_gypfiles/v8.gyp\n+++ b/tools/v8_gypfiles/v8.gyp\n@@ -1194,19 +1194,19 @@\n           'conditions': [\n             ['v8_enable_webassembly==1', {\n               'conditions': [\n-                ['((_toolset==\"host\" and host_arch==\"arm64\" or _toolset==\"target\" and target_arch==\"arm64\") and (OS in \"linux mac ios openharmony\")) or ((_toolset==\"host\" and host_arch==\"x64\" or _toolset==\"target\" and target_arch==\"x64\") and (OS in \"linux mac openharmony\"))', {\n+                ['((_toolset==\"host\" and host_arch==\"arm64\") or (_toolset==\"target\" and target_arch==\"arm64\")) and (OS==\"linux\" or OS==\"mac\" or OS==\"ios\" or OS==\"openharmony\") or ((_toolset==\"host\" and host_arch==\"x64\") or (_toolset==\"target\" and target_arch==\"x64\")) and (OS==\"linux\" or OS==\"mac\" or OS==\"openharmony\")', {\n                   'sources': [\n                     '<(V8_ROOT)/src/trap-handler/handler-inside-posix.cc',\n                     '<(V8_ROOT)/src/trap-handler/handler-outside-posix.cc',\n                   ],\n                 }],\n-                ['(_toolset==\"host\" and host_arch==\"x64\" or _toolset==\"target\" and target_arch==\"x64\") and OS==\"win\"', {\n+                ['((_toolset==\"host\" and host_arch==\"x64\") or (_toolset==\"target\" and target_arch==\"x64\")) and OS==\"win\"', {\n                   'sources': [\n                     '<(V8_ROOT)/src/trap-handler/handler-inside-win.cc',\n                     '<(V8_ROOT)/src/trap-handler/handler-outside-win.cc',\n                   ],\n                 }],\n-                ['(_toolset==\"host\" and host_arch==\"x64\" or _toolset==\"target\" and target_arch==\"x64\") and (OS in \"linux mac win openharmony\")', {\n+                ['((_toolset==\"host\" and host_arch==\"x64\") or (_toolset==\"target\" and target_arch==\"x64\")) and (OS==\"linux\" or OS==\"mac\" or OS==\"win\" or OS==\"openharmony\")', {\n                   'sources': [\n                     '<(V8_ROOT)/src/trap-handler/handler-outside-simulator.cc',\n                   ],\n\n```\n", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58975/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58970", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58970/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58970/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58970/events", "html_url": "https://github.com/nodejs/node/issues/58970", "id": 3205971221, "node_id": "I_kwDOAZ7xs86_Fz0V", "number": 58970, "title": "`ENOENT` error when reading root of `subst` drive on Windows", "user": {"login": "PetSerAl", "id": 17184058, "node_id": "MDQ6VXNlcjE3MTg0MDU4", "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PetSerAl", "html_url": "https://github.com/PetSerAl", "followers_url": "https://api.github.com/users/PetSerAl/followers", "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}", "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}", "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions", "organizations_url": "https://api.github.com/users/PetSerAl/orgs", "repos_url": "https://api.github.com/users/PetSerAl/repos", "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}", "received_events_url": "https://api.github.com/users/PetSerAl/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 166236401, "node_id": "MDU6TGFiZWwxNjYyMzY0MDE=", "url": "https://api.github.com/repos/nodejs/node/labels/windows", "name": "windows", "color": "9944dd", "default": false, "description": "Issues and PRs related to the Windows platform."}, {"id": 214431115, "node_id": "MDU6TGFiZWwyMTQ0MzExMTU=", "url": "https://api.github.com/repos/nodejs/node/labels/libuv", "name": "libuv", "color": "bfd4f2", "default": false, "description": "Issues and PRs related to the libuv dependency or the uv binding."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2025-07-06T03:02:07Z", "updated_at": "2025-07-08T13:26:50Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### Version\n\nv24.3.0\n\n### Platform\n\n```text\nMicrosoft Windows NT 10.0.26100.0 x64\n```\n\n### Subsystem\n\n_No response_\n\n### What steps will reproduce the bug?\n\n```cmd\nmd Subst\necho test>Subst\\testfile\nsubst M: Subst\n```\n```nodejs\nfs.readdirSync(\"C:\\\\\")\nfs.readdirSync(\"M:\\\\\")\nfs.readdirSync(\"M:\\\\.\")\n```\n<img width=\"1240\" height=\"951\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/a55eae80-1675-4779-9869-c1441e32ea9f\" />\n\n### How often does it reproduce? Is there a required condition?\n\nAlways\n\n### What is the expected behavior? Why is that the expected behavior?\n\nNo error should happens.\n\n### What do you see instead?\n\nENOENT: no such file or directory, scandir 'M:\\\\\\\\'\n\n### Additional information\n\nNot program with Node.js myself. Have issue with this behavior with VS Code extension https://github.com/belav/csharpier/issues/1637", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58970/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58955", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58955/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58955/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58955/events", "html_url": "https://github.com/nodejs/node/issues/58955", "id": 3203281467, "node_id": "I_kwDOAZ7xs86-7jI7", "number": 58955, "title": "Tracking Issue: Port all SonicBoom tests for FastUtf8Stream", "user": {"login": "jasnell", "id": 439929, "node_id": "MDQ6VXNlcjQzOTkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/439929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasnell", "html_url": "https://github.com/jasnell", "followers_url": "https://api.github.com/users/jasnell/followers", "following_url": "https://api.github.com/users/jasnell/following{/other_user}", "gists_url": "https://api.github.com/users/jasnell/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasnell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasnell/subscriptions", "organizations_url": "https://api.github.com/users/jasnell/orgs", "repos_url": "https://api.github.com/users/jasnell/repos", "events_url": "https://api.github.com/users/jasnell/events{/privacy}", "received_events_url": "https://api.github.com/users/jasnell/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2025-07-04T16:42:33Z", "updated_at": "2025-07-05T07:14:45Z", "closed_at": null, "author_association": "MEMBER", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "https://github.com/nodejs/node/pull/58897 ports the [SonicBoom](https://github.com/pinojs/sonic-boom) module into `node:fs` as `FastUtf8Stream`. Not all of the tests were directly importable because they require on a third-party dep called \"proxyquire\". These need to be fully ported.\n\n/cc @mcollina ", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58955/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58955/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58937", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58937/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58937/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58937/events", "html_url": "https://github.com/nodejs/node/issues/58937", "id": 3197006879, "node_id": "I_kwDOAZ7xs86-jnQf", "number": 58937, "title": "Test runner's output is hard to read due to blue-on-black text", "user": {"login": "iccir", "id": 1097294, "node_id": "MDQ6VXNlcjEwOTcyOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1097294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iccir", "html_url": "https://github.com/iccir", "followers_url": "https://api.github.com/users/iccir/followers", "following_url": "https://api.github.com/users/iccir/following{/other_user}", "gists_url": "https://api.github.com/users/iccir/gists{/gist_id}", "starred_url": "https://api.github.com/users/iccir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iccir/subscriptions", "organizations_url": "https://api.github.com/users/iccir/orgs", "repos_url": "https://api.github.com/users/iccir/repos", "events_url": "https://api.github.com/users/iccir/events{/privacy}", "received_events_url": "https://api.github.com/users/iccir/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 207445406, "node_id": "MDU6TGFiZWwyMDc0NDU0MDY=", "url": "https://api.github.com/repos/nodejs/node/labels/feature%20request", "name": "feature request", "color": "0D7BDE", "default": false, "description": "Issues that request new features to be added to Node.js."}, {"id": 4103821612, "node_id": "LA_kwDOAZ7xs870m1ks", "url": "https://api.github.com/repos/nodejs/node/labels/test_runner", "name": "test_runner", "color": "EDD871", "default": false, "description": "Issues and PRs related to the test runner subsystem."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2025-07-02T19:47:00Z", "updated_at": "2025-07-03T15:46:21Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "Node's test runner currently uses `colors.blue` for info text. This text is hard to read on a black background.\n\nWhile the exact color will vary depending on operating system, monitor color profile, and terminal settings; ANSI escape code `ESC[34m` will typically generate a blue somewhere between `(0, 0, 128)` and `(0, 0, 238)`. On a black background, this has a contrast ratio between ~1.3:1 (worst case) and ~2.2:1 (best case). That's far below the 4.5:1 to meet WCAG AA.\n\nI recognize that, historically, meeting color contrast guidelines is not in scope for command-line tools, and that end users have the ability to customize it in their terminal application.\n\nThat said, `colors.blue` is probably not an ideal choice for large amounts of text. While `colors.red` has a similar issue, its usage is limited. `colors.yellow` and `colors.green` are fine.\n\nCould there be an option to customize color output in the test runner?\n\n![Image](https://github.com/user-attachments/assets/e95bf267-c669-4bfd-aff9-9875f05f462f)", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58937/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58937/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58926", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58926/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58926/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58926/events", "html_url": "https://github.com/nodejs/node/issues/58926", "id": 3195457943, "node_id": "I_kwDOAZ7xs86-dtGX", "number": 58926, "title": "Proposal: Resource Management Scopes for Node.js", "user": {"login": "polRk", "id": 39828645, "node_id": "MDQ6VXNlcjM5ODI4NjQ1", "avatar_url": "https://avatars.githubusercontent.com/u/39828645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/polRk", "html_url": "https://github.com/polRk", "followers_url": "https://api.github.com/users/polRk/followers", "following_url": "https://api.github.com/users/polRk/following{/other_user}", "gists_url": "https://api.github.com/users/polRk/gists{/gist_id}", "starred_url": "https://api.github.com/users/polRk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/polRk/subscriptions", "organizations_url": "https://api.github.com/users/polRk/orgs", "repos_url": "https://api.github.com/users/polRk/repos", "events_url": "https://api.github.com/users/polRk/events{/privacy}", "received_events_url": "https://api.github.com/users/polRk/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 207445406, "node_id": "MDU6TGFiZWwyMDc0NDU0MDY=", "url": "https://api.github.com/repos/nodejs/node/labels/feature%20request", "name": "feature request", "color": "0D7BDE", "default": false, "description": "Issues that request new features to be added to Node.js."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2025-07-02T10:44:51Z", "updated_at": "2025-07-08T17:22:08Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### What is the problem this feature will solve?\n\nProblem\n\nNode.js applications frequently suffer from resource leaks when developers forget to properly close files, sockets, timers, or other native resources. This is especially problematic when exceptions occur before cleanup code executes.\n\n```js\n// Current problematic pattern\nfunction processFile(filename) {\n    let fd = fs.openSync(filename, 'r')\n    let timer = setInterval(() => console.log('processing'), 1000)\n    \n    // If exception occurs here, resources leak\n    if (someCondition) {\n        throw new Error('Processing failed')\n    }\n    \n    // Cleanup code may never execute\n    fs.closeSync(fd)\n    clearInterval(timer)\n}\n```\n\n### What is the feature you are proposing to solve the problem?\n\nAdd a built-in ResourceScope API that automatically cleans up registered resources when the scope is disposed, even during exception.\n\n```js\n{\n    using scope = new ResourceScope()\n    \n    // Auto cleanup well-known nodejs objects.\n\n    let timer = setTimeout(() => console.log('tick'), 1000)  // auto clearTimeout\n    let interval = setInterval(() => console.log('interval'), 500)  // auto clearInterval\n\n    let fd = fs.openSync('file.txt', 'r')  // auto fs.closeSync\n    let stream = fs.createReadStream('data.txt')  // auto stream.close()\n    \n    let server = http.createServer()  // auto server.close()\n    let child = spawn('node', ['script.js'])  // auto child.kill()\n}\n```\n\n### What alternatives have you considered?\n\n\n```js\nimport { ResourceScope } from 'node:resource'\n\nfunction processFile(filename) {\n    using scope = new ResourceScope()\n    \n    let fd = scope.register(fs.openSync(filename, 'r'), fs.closeSync)\n    let timer = scope.register(\n        setInterval(() => console.log('processing'), 1000),\n        clearInterval\n    )\n    \n    // Process file...\n    // Resources automatically cleaned up on scope exit\n}\n```", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58926/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58926/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58908", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58908/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58908/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58908/events", "html_url": "https://github.com/nodejs/node/issues/58908", "id": 3189819312, "node_id": "I_kwDOAZ7xs86-IMew", "number": 58908, "title": "Error [ERR_INTERNAL_ASSERTION]: This is caused by either a bug in Node.js or incorrect usage of Node.js internals", "user": {"login": "coderaiser", "id": 1573141, "node_id": "MDQ6VXNlcjE1NzMxNDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1573141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coderaiser", "html_url": "https://github.com/coderaiser", "followers_url": "https://api.github.com/users/coderaiser/followers", "following_url": "https://api.github.com/users/coderaiser/following{/other_user}", "gists_url": "https://api.github.com/users/coderaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/coderaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coderaiser/subscriptions", "organizations_url": "https://api.github.com/users/coderaiser/orgs", "repos_url": "https://api.github.com/users/coderaiser/repos", "events_url": "https://api.github.com/users/coderaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/coderaiser/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2025-06-30T20:48:39Z", "updated_at": "2025-07-15T11:13:14Z", "closed_at": null, "author_association": "CONTRIBUTOR", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### Version\n\nnode v24.3\n\n### Platform\n\nhttps://github.com/coderaiser/putout/actions/runs/15983085500/job/45081714186\n\n### Subsystem\n\n_No response_\n\n### What steps will reproduce the bug?\n\nnpm run coverage\n\n### How often does it reproduce? Is there a required condition?\n\nAlways after upgrading to v24.3, works good on v20, v22, v24.2\n\n### What is the expected behavior? Why is that the expected behavior?\n\nNot fail\n\n### What do you see instead?\n\nfail\n\n### Additional information\n\nTests on CI started to fail on node v24.3", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58908/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58908/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58895", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58895/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58895/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58895/events", "html_url": "https://github.com/nodejs/node/issues/58895", "id": 3186618351, "node_id": "I_kwDOAZ7xs8697-_v", "number": 58895, "title": "Some CLI options documented in the CLI docs are missing in node manpage", "user": {"login": "dario-piotrowicz", "id": 61631103, "node_id": "MDQ6VXNlcjYxNjMxMTAz", "avatar_url": "https://avatars.githubusercontent.com/u/61631103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dario-piotrowicz", "html_url": "https://github.com/dario-piotrowicz", "followers_url": "https://api.github.com/users/dario-piotrowicz/followers", "following_url": "https://api.github.com/users/dario-piotrowicz/following{/other_user}", "gists_url": "https://api.github.com/users/dario-piotrowicz/gists{/gist_id}", "starred_url": "https://api.github.com/users/dario-piotrowicz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dario-piotrowicz/subscriptions", "organizations_url": "https://api.github.com/users/dario-piotrowicz/orgs", "repos_url": "https://api.github.com/users/dario-piotrowicz/repos", "events_url": "https://api.github.com/users/dario-piotrowicz/events{/privacy}", "received_events_url": "https://api.github.com/users/dario-piotrowicz/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 155267517, "node_id": "MDU6TGFiZWwxNTUyNjc1MTc=", "url": "https://api.github.com/repos/nodejs/node/labels/doc", "name": "doc", "color": "006b75", "default": false, "description": "Issues and PRs related to the documentations."}, {"id": 202120392, "node_id": "MDU6TGFiZWwyMDIxMjAzOTI=", "url": "https://api.github.com/repos/nodejs/node/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Issues that are suitable for first-time contributors."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2025-06-29T22:11:40Z", "updated_at": "2025-07-23T17:37:35Z", "closed_at": null, "author_association": "MEMBER", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### Version\n\n24\n\n### Platform\n\n```text\nAll\n```\n\n### Subsystem\n\ndoc\n\n### What steps will reproduce the bug?\n\nRun `man node` and view the `OPTIONS` section\n\nCompare it to https://nodejs.org/api/cli.html#options ([permalink](https://github.com/nodejs/node/blob/8b199eef3dd4de910a6521adc42ae611a62a19e1/doc/api/cli.md?plain=1#L55))\n\n### How often does it reproduce? Is there a required condition?\n\nAlways\n\n### What is the expected behavior? Why is that the expected behavior?\n\nWhatever is documented in the CLI documentation should also be documented in the node manpage\n\n### What do you see instead?\n\nThe following options are missing:\n  - `build-snapshot`\n  - `build-snapshot-config`\n  - `disable-sigusr1`\n  - `disable-warning`\n  - `dns-result-order`\n  - `enable-network-family-autoselection`\n  - `env-file-if-exists`\n  - `env-file`\n  - `experimental-network-inspection`\n  - `experimental-print-required-tla`\n  - `experimental-require-module`\n  - `experimental-sea-config`\n  - `experimental-worker-inspection`\n  - `expose-gc`\n  - `force-node-api-uncaught-exceptions-policy`\n  - `import`\n  - `network-family-autoselection-attempt-timeout`\n  - `no-async-context-frame`\n  - `no-experimental-detect-module`\n  - `no-experimental-global-navigator`\n  - `no-experimental-require-module`\n  - `no-network-family-autoselection`\n  - `openssl-legacy-provider`\n  - `openssl-shared-config`\n  - `report-dir`\n  - `report-directory`\n  - `report-exclude-env`\n  - `report-exclude-network`\n  - `run`\n  - `snapshot-blob`\n  - `trace-env`\n  - `trace-env-js-stack`\n  - `trace-env-native-stack`\n  - `trace-require-module`\n  - `use-system-ca`\n  - `watch-preserve-output`\n\n### Additional information\n\nThey need to be added in the [appropriate node.1 section](https://github.com/nodejs/node/blob/8b199eef3dd4de910a6521adc42ae611a62a19e1/doc/node.1#L60).\n\nAfterwords the following code, since no longer necessary, needs to be removed:\nhttps://github.com/nodejs/node/blob/4b4aaf921fda21c329caf349b23c0620867e4e6c/test/parallel/test-cli-node-cli-manpage-options.mjs#L21-L60", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58895/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58895/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58892", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58892/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58892/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58892/events", "html_url": "https://github.com/nodejs/node/issues/58892", "id": 3186567762, "node_id": "I_kwDOAZ7xs8697ypS", "number": 58892, "title": "all versions of `readdir` don't work in recursive mode when used with a buffer argument", "user": {"login": "dario-piotrowicz", "id": 61631103, "node_id": "MDQ6VXNlcjYxNjMxMTAz", "avatar_url": "https://avatars.githubusercontent.com/u/61631103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dario-piotrowicz", "html_url": "https://github.com/dario-piotrowicz", "followers_url": "https://api.github.com/users/dario-piotrowicz/followers", "following_url": "https://api.github.com/users/dario-piotrowicz/following{/other_user}", "gists_url": "https://api.github.com/users/dario-piotrowicz/gists{/gist_id}", "starred_url": "https://api.github.com/users/dario-piotrowicz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dario-piotrowicz/subscriptions", "organizations_url": "https://api.github.com/users/dario-piotrowicz/orgs", "repos_url": "https://api.github.com/users/dario-piotrowicz/repos", "events_url": "https://api.github.com/users/dario-piotrowicz/events{/privacy}", "received_events_url": "https://api.github.com/users/dario-piotrowicz/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 151728674, "node_id": "MDU6TGFiZWwxNTE3Mjg2NzQ=", "url": "https://api.github.com/repos/nodejs/node/labels/confirmed-bug", "name": "confirmed-bug", "color": "fc2929", "default": false, "description": "Issues with confirmed bugs."}, {"id": 155435785, "node_id": "MDU6TGFiZWwxNTU0MzU3ODU=", "url": "https://api.github.com/repos/nodejs/node/labels/fs", "name": "fs", "color": "0052cc", "default": false, "description": "Issues and PRs related to the fs subsystem / file system."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2025-06-29T20:59:18Z", "updated_at": "2025-06-29T21:02:28Z", "closed_at": null, "author_association": "MEMBER", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### Version\n\nAll\n\n### Platform\n\n```text\nAll\n```\n\n### Subsystem\n\nfs\n\n### What steps will reproduce the bug?\n\nCalling `readdir` with a Buffer argument and the `recursive` flag produces an `ERR_INVALID_ARG_TYPE` error\n\n![Image](https://github.com/user-attachments/assets/5a030fb3-7372-4487-98d3-9c106c7c6fda)\n\nBecause of this `join`:\n\nhttps://github.com/nodejs/node/blob/139c2e1e297939f677f4198fe8c416e9b29a4cf9/lib/fs.js#L1434\n\nAfter that there are also some other `join`s that would kick in as well:\n - https://github.com/nodejs/node/blob/139c2e1e297939f677f4198fe8c416e9b29a4cf9/lib/internal/fs/promises.js#L897\n - https://github.com/nodejs/node/blob/139c2e1e297939f677f4198fe8c416e9b29a4cf9/lib/internal/fs/promises.js#L918\n\n____\n\nThis happens with all version of `readdir`  both the callback and promises versions (since they share the same code (referred by the above links)) as well as `readdirSync` (since that also uses the same processReaddirResult` utility the other two do)\n\n\n### How often does it reproduce? Is there a required condition?\n\nAlways\n\n### What is the expected behavior? Why is that the expected behavior?\n\nThe expected behavior would be for the `readdir` functions not to error and return either an array of `Buffer`s or `Dirent`s (depending on `options.withFileTypes`)\n\nThis is the behavior described in the documentation:\n - [`readdir` docs](https://nodejs.org/api/fs.html#fsreaddirpath-options-callback) ([permalink](https://github.com/nodejs/node/blob/61a0b12c8052840b2e6514ba840b6ba500255882/doc/api/fs.md?plain=1#L3825))\n - [`fsPromises.readdir` docs](https://nodejs.org/api/fs.html#fsreaddirpath-options-callback) ([permalink](https://github.com/nodejs/node/blob/61a0b12c8052840b2e6514ba840b6ba500255882/doc/api/fs.md?plain=1#L1400))\n - [`readdirSync` docs](https://nodejs.org/api/fs.html#fsreaddirsyncpath-options) ([permalink](https://github.com/nodejs/node/blob/61a0b12c8052840b2e6514ba840b6ba500255882/doc/api/fs.md?plain=1#L5982))\n\n\n\n### What do you see instead?\n\nUnexpected `ERR_INVALID_ARG_TYPE` errors are getting thrown\n\n### Additional information\n\nThis issue is the equivalent to https://github.com/nodejs/node/issues/58634 but for `readdir`", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58892/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58892/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58887", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58887/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58887/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58887/events", "html_url": "https://github.com/nodejs/node/issues/58887", "id": 3186435144, "node_id": "I_kwDOAZ7xs8697SRI", "number": 58887, "title": "Report 0% coverage for untested files in a project (i.e., files matching some glob)", "user": {"login": "ethanresnick", "id": 471894, "node_id": "MDQ6VXNlcjQ3MTg5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/471894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ethanresnick", "html_url": "https://github.com/ethanresnick", "followers_url": "https://api.github.com/users/ethanresnick/followers", "following_url": "https://api.github.com/users/ethanresnick/following{/other_user}", "gists_url": "https://api.github.com/users/ethanresnick/gists{/gist_id}", "starred_url": "https://api.github.com/users/ethanresnick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ethanresnick/subscriptions", "organizations_url": "https://api.github.com/users/ethanresnick/orgs", "repos_url": "https://api.github.com/users/ethanresnick/repos", "events_url": "https://api.github.com/users/ethanresnick/events{/privacy}", "received_events_url": "https://api.github.com/users/ethanresnick/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 207445406, "node_id": "MDU6TGFiZWwyMDc0NDU0MDY=", "url": "https://api.github.com/repos/nodejs/node/labels/feature%20request", "name": "feature request", "color": "0D7BDE", "default": false, "description": "Issues that request new features to be added to Node.js."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2025-06-29T18:21:47Z", "updated_at": "2025-07-20T12:05:15Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### What is the problem this feature will solve?\n\nRight now, the test runner with `--experimental-code-coverage` doesn't seem to include an entry in the report for files that were not tested at all \u2014 i.e., that didn't get loaded during the test execution \u2014 even if those files were matched by a `--test-coverage-include` glob.\n\nThis can make the report very misleading, as the reported \"all files\" coverage percentage can easily go up, even when actual coverage has gone down (i.e.,. because a new file was introduced with no tests at all).\n\nI know this has been raised at least [twice](https://github.com/nodejs/help/issues/4487) [before](https://github.com/orgs/nodejs/discussions/4564), but there didn't seem to be any issue for it on the issue tracker, so I wanted to raise it here.\n\n### What is the feature you are proposing to solve the problem?\n\nThere should be some way to have these untested files show up in the report, but report 0% coverage. The effect (although not necessarily the implementation) would be similar to istanbul's [`--all` option](https://github.com/istanbuljs/nyc?tab=readme-ov-file#selecting-files-for-coverage).\n\nI'm not wedded to a particular API, but one reasonable option might be to have a `--test-coverage-include-all` flag that makes sure that any file matched by `--test-coverage-include` shows up in the report.\n\n### What alternatives have you considered?\n\nAs mentioned [here](https://github.com/nodejs/help/issues/4487), it's possible to sort of simulate this effect by passing a glob to `node --test` that covers all the files in the project. However, every file then gets run as a test file, which is a lot of extra overhead, as these files don't actually have any tests.", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58887/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58887/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58873", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58873/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58873/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58873/events", "html_url": "https://github.com/nodejs/node/issues/58873", "id": 3185158266, "node_id": "I_kwDOAZ7xs8692ah6", "number": 58873, "title": "Add Float16Array support to node-api", "user": {"login": "Renegade334", "id": 9092381, "node_id": "MDQ6VXNlcjkwOTIzODE=", "avatar_url": "https://avatars.githubusercontent.com/u/9092381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Renegade334", "html_url": "https://github.com/Renegade334", "followers_url": "https://api.github.com/users/Renegade334/followers", "following_url": "https://api.github.com/users/Renegade334/following{/other_user}", "gists_url": "https://api.github.com/users/Renegade334/gists{/gist_id}", "starred_url": "https://api.github.com/users/Renegade334/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Renegade334/subscriptions", "organizations_url": "https://api.github.com/users/Renegade334/orgs", "repos_url": "https://api.github.com/users/Renegade334/repos", "events_url": "https://api.github.com/users/Renegade334/events{/privacy}", "received_events_url": "https://api.github.com/users/Renegade334/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 574036893, "node_id": "MDU6TGFiZWw1NzQwMzY4OTM=", "url": "https://api.github.com/repos/nodejs/node/labels/node-api", "name": "node-api", "color": "d93f0b", "default": false, "description": "Issues and PRs related to the Node-API."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2025-06-28T15:58:18Z", "updated_at": "2025-06-29T13:50:25Z", "closed_at": null, "author_association": "CONTRIBUTOR", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "node-api 11 should ideally have Float16Array support for features like `napi_create_typedarray` et al.\n\ncc: @nodejs/node-api", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58873/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58873/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58871", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58871/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58871/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58871/events", "html_url": "https://github.com/nodejs/node/issues/58871", "id": 3184912288, "node_id": "I_kwDOAZ7xs8691eeg", "number": 58871, "title": "Network.dataSent event missing documentation/PDL", "user": {"login": "Renegade334", "id": 9092381, "node_id": "MDQ6VXNlcjkwOTIzODE=", "avatar_url": "https://avatars.githubusercontent.com/u/9092381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Renegade334", "html_url": "https://github.com/Renegade334", "followers_url": "https://api.github.com/users/Renegade334/followers", "following_url": "https://api.github.com/users/Renegade334/following{/other_user}", "gists_url": "https://api.github.com/users/Renegade334/gists{/gist_id}", "starred_url": "https://api.github.com/users/Renegade334/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Renegade334/subscriptions", "organizations_url": "https://api.github.com/users/Renegade334/orgs", "repos_url": "https://api.github.com/users/Renegade334/repos", "events_url": "https://api.github.com/users/Renegade334/events{/privacy}", "received_events_url": "https://api.github.com/users/Renegade334/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 386816750, "node_id": "MDU6TGFiZWwzODY4MTY3NTA=", "url": "https://api.github.com/repos/nodejs/node/labels/inspector", "name": "inspector", "color": "bfd4f2", "default": false, "description": "Issues and PRs related to the V8 inspector protocol"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2025-06-28T12:29:49Z", "updated_at": "2025-07-01T16:41:42Z", "closed_at": null, "author_association": "CONTRIBUTOR", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "The `Network.dataSent()` API was added in #58645, but the corresponding event was not added to the schema, which is causing issues with downstream tooling.\n\ncc: @legendecas", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58871/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58868", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58868/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58868/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58868/events", "html_url": "https://github.com/nodejs/node/issues/58868", "id": 3183892109, "node_id": "I_kwDOAZ7xs869xlaN", "number": 58868, "title": "fs.watch recursive on Linux emits spurious rename events for sibling files/directories prefixed by related paths on deletion", "user": {"login": "Sodium-Aluminate", "id": 38349409, "node_id": "MDQ6VXNlcjM4MzQ5NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/38349409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sodium-Aluminate", "html_url": "https://github.com/Sodium-Aluminate", "followers_url": "https://api.github.com/users/Sodium-Aluminate/followers", "following_url": "https://api.github.com/users/Sodium-Aluminate/following{/other_user}", "gists_url": "https://api.github.com/users/Sodium-Aluminate/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sodium-Aluminate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sodium-Aluminate/subscriptions", "organizations_url": "https://api.github.com/users/Sodium-Aluminate/orgs", "repos_url": "https://api.github.com/users/Sodium-Aluminate/repos", "events_url": "https://api.github.com/users/Sodium-Aluminate/events{/privacy}", "received_events_url": "https://api.github.com/users/Sodium-Aluminate/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 155435785, "node_id": "MDU6TGFiZWwxNTU0MzU3ODU=", "url": "https://api.github.com/repos/nodejs/node/labels/fs", "name": "fs", "color": "0052cc", "default": false, "description": "Issues and PRs related to the fs subsystem / file system."}, {"id": 1395943359, "node_id": "MDU6TGFiZWwxMzk1OTQzMzU5", "url": "https://api.github.com/repos/nodejs/node/labels/linux", "name": "linux", "color": "9944dd", "default": false, "description": "Issues and PRs related to the Linux platform."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2025-06-27T19:30:27Z", "updated_at": "2025-06-29T19:29:14Z", "closed_at": null, "author_association": "NONE", "type": null, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### Version\n\nv24.2.0 (from archlinux) and v24.1.0 (from nwjs) \n\n### Platform\n\n```text\nLinux ****** 6.15.2-arch1-1 #1 SMP PREEMPT_DYNAMIC Tue, 10 Jun 2025 21:32:33 +0000 x86_64 GNU/Linux\n```\n\n### Subsystem\n\nfs\n\n### What steps will reproduce the bug?\n\n1. open 2 window, prepare test files in the first window:\n```bash\nmkdir -p foo_bar/somedir\ntouch foo_bar/file.txt\nmkdir foo\ntouch foo_\n```\n2. open a node repl in the second window:\n```js\nfs.watch(\".\", { recursive: true }, console.log);\n```\n3. keep the node running, back to the first window:\n```bash\nrmdir foo\n```\nObserved output in the second window:\n```text\nrename foo\nrename foo_\nrename foo_bar\nrename foo_bar/file.txt\nrename foo_bar/somedir\n```\nand then:\n```bash\nrm foo_\n```\nObserved output in the second window:\n```text\nrename foo_\nrename foo_bar\nrename foo_bar/file.txt\nrename foo_bar/somedir\n```\n\n### How often does it reproduce? Is there a required condition?\n\nN/A\n\n### What is the expected behavior? Why is that the expected behavior?\n\nexpected not send the unrelated event(in test case, foo_bar is unchanged, but we got a fake event)\n\n### What do you see instead?\n\n(already attached output in reproduce steps)\n\n![Image](https://github.com/user-attachments/assets/f26d510d-e13f-4db5-9ba6-d5733ecf563f)\n\n### Additional information\n\n_No response_", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58868/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58868/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}, {"url": "https://api.github.com/repos/nodejs/node/issues/58857", "repository_url": "https://api.github.com/repos/nodejs/node", "labels_url": "https://api.github.com/repos/nodejs/node/issues/58857/labels{/name}", "comments_url": "https://api.github.com/repos/nodejs/node/issues/58857/comments", "events_url": "https://api.github.com/repos/nodejs/node/issues/58857/events", "html_url": "https://github.com/nodejs/node/issues/58857", "id": 3180790076, "node_id": "I_kwDOAZ7xs869lwE8", "number": 58857, "title": "v8.writeHeapSnapshot to accept a folder as path to write it's snapshot", "user": {"login": "BridgeAR", "id": 8822573, "node_id": "MDQ6VXNlcjg4MjI1NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/8822573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BridgeAR", "html_url": "https://github.com/BridgeAR", "followers_url": "https://api.github.com/users/BridgeAR/followers", "following_url": "https://api.github.com/users/BridgeAR/following{/other_user}", "gists_url": "https://api.github.com/users/BridgeAR/gists{/gist_id}", "starred_url": "https://api.github.com/users/BridgeAR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BridgeAR/subscriptions", "organizations_url": "https://api.github.com/users/BridgeAR/orgs", "repos_url": "https://api.github.com/users/BridgeAR/repos", "events_url": "https://api.github.com/users/BridgeAR/events{/privacy}", "received_events_url": "https://api.github.com/users/BridgeAR/received_events", "type": "User", "user_view_type": "public", "site_admin": false}, "labels": [{"id": 207445406, "node_id": "MDU6TGFiZWwyMDc0NDU0MDY=", "url": "https://api.github.com/repos/nodejs/node/labels/feature%20request", "name": "feature request", "color": "0D7BDE", "default": false, "description": "Issues that request new features to be added to Node.js."}, {"id": 1651616760, "node_id": "MDU6TGFiZWwxNjUxNjE2NzYw", "url": "https://api.github.com/repos/nodejs/node/labels/v8%20module", "name": "v8 module", "color": "82bfdd", "default": false, "description": "Issues and PRs related to the \"v8\" subsystem."}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2025-06-26T23:34:01Z", "updated_at": "2025-06-29T14:57:55Z", "closed_at": null, "author_association": "MEMBER", "type": {"id": 1190262, "node_id": "IT_kwDOAJfUac4AEil2", "name": "Feature", "description": "A request, idea, or new functionality", "color": "blue", "created_at": "2024-01-25T12:08:34Z", "updated_at": "2024-10-08T09:14:01Z", "is_enabled": true}, "active_lock_reason": null, "sub_issues_summary": {"total": 0, "completed": 0, "percent_completed": 0}, "issue_dependencies_summary": {"blocked_by": 0, "total_blocked_by": 0, "blocking": 0, "total_blocking": 0}, "body": "### What is the problem this feature will solve?\n\nI want to keep the pid and the timestamp of a file while writing the snapshot to a dedicated folder.\nRecreating the name is actually a bit messy and it would be nice if a folder would be accepted instead. That way the default filename could be used as before and it would be more convenient for users.\n\n### What is the feature you are proposing to solve the problem?\n\nAccepting a folder as path and writing the file with its usual name in that folder.\n\n### What alternatives have you considered?\n\n_No response_", "reactions": {"url": "https://api.github.com/repos/nodejs/node/issues/58857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/nodejs/node/issues/58857/timeline", "performed_via_github_app": null, "state_reason": null, "score": 1.0}]}